# tests/test_onboard_and_sync.py

import pytest
from unittest.mock import patch

from src.scripts import onboard_and_sync
from src.db.models.tokens import Token

@pytest.fixture
def seed_tokens(sqlalchemy_session):
    """Seed tokens table for the athlete_id."""
    athlete_id = 123456
    token = Token(
        athlete_id=athlete_id,
        access_token="initial_access",
        refresh_token="initial_refresh",
        expires_at=9999999999
    )
    sqlalchemy_session.add(token)
    sqlalchemy_session.commit()
    return athlete_id

@patch("src.scripts.onboard_and_sync.sync_full_history")
@patch("src.scripts.onboard_and_sync.EnrichmentDebugWrapper.enrich")
@patch("src.scripts.onboard_and_sync.ensure_fresh_access_token")
def test_onboard_and_sync_flow(mock_refresh_token, mock_enrich, mock_sync, sqlalchemy_session, seed_tokens):
    # Mock behavior
    mock_refresh_token.return_value = "mock_access_token"
    mock_sync.return_value = 42  # e.g. 42 activities synced
    mock_enrich.return_value = 42  # e.g. 42 activities enriched

    # Run
    onboard_and_sync.onboard_and_sync(
        athlete_id=seed_tokens,
        lookback_days=30,
        batch_size=10
    )

    # Assertions
    mock_refresh_token.assert_called_once_with(sqlalchemy_session, seed_tokens)
    mock_sync.assert_called_once()
    mock_enrich.assert_called_once()

