# src/services/ingestion_orchestrator_service.py

"""
ðŸ“Œ CENTRALIZED INGESTION + ENRICHMENT ORCHESTRATOR

Use `run_full_ingestion_and_enrichment()` to populate activities, splits, and enrichment data.
This is the only source of truth for complete and correct ingestion.
All routes, scripts, and pipelines MUST call this to ensure schema consistency.
"""



import logging
from src.db.dao.token_dao import get_tokens_sa
from src.services.token_service import get_valid_token
from src.services.activity_service import ActivityIngestionService, run_enrichment_batch

logger = logging.getLogger(__name__)

def run_full_ingestion_and_enrichment(session, athlete_id, lookback_days=30, max_activities=None, batch_size=10):
    logger.info(f"ðŸš€ Starting run_full_ingestion_and_enrichment for athlete {athlete_id}")

    tokens = get_tokens_sa(session, athlete_id)
    if not tokens:
        raise RuntimeError(
            f"No tokens found for athlete {athlete_id}. "
            "Please complete OAuth authorization first via /oauth/callback."
        )

    access_token = get_valid_token(session, athlete_id)
    logger.info(f"ðŸŸ¢ Retrieved valid access token for athlete {athlete_id}")

    service = ActivityIngestionService(session, athlete_id)
    inserted = service.ingest_full_history(lookback_days=lookback_days, max_activities=max_activities)
    logger.info(f"âœ… Synced {inserted} activities")

    enriched = run_enrichment_batch(session, athlete_id, batch_size=batch_size)
    logger.info(f"âœ… Enriched {enriched} activities")

    logger.info(f"ðŸŽ¯ Ingestion + enrichment complete for athlete {athlete_id}")
    return {"inserted": inserted, "enriched": enriched}
